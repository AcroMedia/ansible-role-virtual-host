#!/bin/bash
set -eu
set -o pipefail

source /usr/local/lib/acro/bash/functions.sh

## Ansible helper script to support nginx_aliases being optional.
## This would end up being way too convoluted to try and accomplish inside the playbook.

function main () {

  local GROOMED_DOMAINS_LIST=""
  GROOMED_DOMAINS_LIST=$(groom_list_of_domains)

  CMD="$(find_certbot)"
  CMD="$CMD certonly"
  CMD="$CMD --no-self-upgrade"
  CMD="$CMD --non-interactive"
  CMD="$CMD --webroot"
  CMD="$CMD --webroot-path /var/www/letsencrypt"
  CMD="$CMD --agree-tos"
  if [ -n "$LE_EXPIRY_EMAIL" ]; then
    CMD="$CMD --email '${LE_EXPIRY_EMAIL}'"
  fi
  CMD="$CMD --cert-name $NGINX_PRIMAL_NAME"
  CMD="$CMD --keep"
  CMD="$CMD --domains ${GROOMED_DOMAINS_LIST}"
  (set -x && $CMD --dry-run && $CMD)

}

# Letsencrypt has flip-flopped with its name and location over the years.
# Simply doing a "which" may hit the wrong one if legacy versions are still around.
function find_certbot() {
  if [ -e /snap/bin/certbot ]; then   # Snap version, 2020
    echo /snap/bin/certbot
    return 0
  elif [ -e /usr/local/bin/certbot-auto ]; then  # Self-updating script version, 2019ish, now deprecated.
    echo /usr/local/bin/certbot-auto
    return 0
  elif [ -e /usr/bin/certbot ]; then   # Package version, 2018ish, now deprecated.
    echo /usr/bin/certbot
    return 0
  else
    # Try and guess, prioritizing the current name.
    which certbot || which certbot-auto || {
      >&2 echo "No certbot or certbot-auto found"
      return 1
    }
  fi
}

function groom_list_of_domains () {

  local DOMAINS
  DOMAINS="${NGINX_PRIMAL_NAME},${NGINX_CANONICAL_NAME},${NGINX_ALIASES}"

  # Remove duplicate names
  DOMAINS=$(echo "$DOMAINS"|tr ',' '\n'|sort|uniq|tr '\n' ',')

  # Remove duplicated commas
  DOMAINS=$(echo "$DOMAINS"| tr --squeeze-repeats ',')

  # Remove beginning and ending commas
  DOMAINS=$(echo "$DOMAINS"| sed 's/^,//')
  DOMAINS=$(echo "$DOMAINS"| sed 's/,$//')

  echo "${DOMAINS}"
}

main "$@"
