---
- include_vars: "vars/{{ ansible_os_family }}.yml"

- name: Make sure nginx_primal_name is not zero length
  assert:
    that:
      - nginx_primal_name|trim != ''
    fail_msg: nginx_primal_name cannot be empty.

- name: Make sure nginx_canonical_name is not zero length
  assert:
    that:
      - nginx_canonical_name|trim != ''
    fail_msg: nginx_canonical_name cannot be empty.

- name: Validate 'web_application' variable value
  assert:
    that:
      - web_application == 'php'
          or web_application == 'drupal8'
          or web_application == 'drupal7'
          or web_application == 'drupal6'
          or web_application == 'drupal5'
          or web_application == 'drupal4'
          or web_application == 'proxy_pass'
          or web_application == 'redirect'
          or web_application == 'static'
          or web_application == 'wordpress'
          or web_application == 'mediawiki'
    fail_msg: "ERROR: Value for web_application is not supported: {{ web_application }}"

- name: Make sure linux_owner is not the same as php_service_user
  assert:
    that:
      - linux_owner != php_service_user
    fail_msg: "ERROR: The PHP user (php_service_user) cannot be the same account as the web account owner (linux_owner).\n
      If they are, the account will be marked as a 'service' account, SSH will not work for it, and you will\n
      not be able create a working CI deploy job."

- name: Make sure primal_name isn't duplicated in aliases
  assert:
    that:
      - nginx_primal_name not in nginx_aliases
    fail_msg: The value for nginx_primal_name appears to be duplicated in the nginx_aliases list 

- name: Make sure canonical name isn't duplicated in aliases
  assert:
    that:
      - nginx_canonical_name not in nginx_aliases
    fail_msg: The value for nginx_canonical_name appears to be duplicated in the nginx_aliases list

- name: See if a site has already been created with AAW
  stat:
    path: /home/{{ linux_owner }}/.acro-add-website/{{ project }}
  register: aaw_hints_result

- name: Prevent AAW from strpping characters out of account or project file names.
  fail:
    msg: The combination of linunx_owner + project name cannot exceed 16 characters.
  when: "(linux_owner != project and (linux_owner|length + project|length) > 16)
    and (aaw_hints_result is defined and aaw_hints_result.stat.exists == false)
    "

- name: Prevent AAW from clipping php service user account names
  fail:
    msg: "The system can't reliably auto-generate a php service user name if the length of 'linunx_owner' exceeds 12 characters. You will need to manually specify the value for 'php_service_user' in your role variables (e.g. 'php_service_user: foo-srv')."
  when: "(php_service_user == '')
    and (linux_owner|length > 12)
    and (aaw_hints_result is defined and aaw_hints_result.stat.exists == false)
    "

# We need to set facts here using internal names, as opposed to the ones we told the role consumer about, because:
# 1: This role is meant to be used multiple times in the same playbook,
# 2: Ansible is basically scopeless; everything is global
# 3: Once we set a fact in a role, it overrides the role's "defaults" the next time the role is used.
# 4: We need to provide a way for the consumer to override defaults, without imposing variable bleed across multiple uses
- name: (Re)set some runtime variables for the role's internal use
  set_fact:
    skip_ssl_flag: ''
    skip_mysql_flag: ''
    rds_flag: ''
    force_flag: ''
    service_account_flag: ''
    x__php_service_user: ''
    x__fpm_pool_filename: ''
    env_mysql_db_name: ''
    env_mysql_db_user: ''
    env_mysql_db_pass: ''

- set_fact:
    skip_ssl_flag: '--skip-ssl'
  when: ssl == 'none'
    or (ssl == 'manual' and deploy_env == 'production')

- set_fact:
    rds_flag: '--rds'
  when: "rds == true"

- set_fact:
    x__fpm_pool_filename: "{{ project }}.conf"
  when: "fpm_pool_filename == ''
    and project == linux_owner"

- set_fact:
    x__fpm_pool_filename: "{{ linux_owner }}-{{ project }}.conf"
  when: "fpm_pool_filename == ''
    and project != linux_owner"

- set_fact:
    x__fpm_pool_filename: "{{ fpm_pool_filename }}"
  when: "x__fpm_pool_filename == ''
    and fpm_pool_filename != '' "

- set_fact:
    x__php_service_user: "{{ project }}-srv"
  when: "php_service_user == ''
    and project == linux_owner"

- set_fact:
    x__php_service_user: "{{ linux_owner }}-{{ project }}-srv"
  when: "php_service_user == ''
    and project != linux_owner"

- set_fact:
    x__php_service_user: "{{ php_service_user }}"
  when: "php_service_user != ''"

- set_fact:
    service_account_flag: '--service-account {{ x__php_service_user }}'
  when: "x__php_service_user != ''"

- set_fact:
    force_flag: '--force'
  when: "force == true"

- set_fact:
    skip_mysql_flag: '--skip-mysql'
  when: skip_mysql == true

- set_fact:
    env_mysql_db_name: 'DBNAME="{{ mysql_db_name }}"'
  when: (mysql_db_name|trim) != ''

- set_fact:
    env_mysql_db_user: 'DBUSER="{{ mysql_db_user }}"'
  when: (mysql_db_user|trim) != ''

- set_fact:
    env_mysql_db_pass: 'DBPASS="{{ mysql_db_pass }}"'
  when: (mysql_db_pass|trim) != ''


- name: Make sure the Acme Challenge include file exists, even if LetsEncrypt is not installed on the system. Otherwise we will end up with nginx fatal config errors.
  copy:
    dest: /etc/nginx/includes/letsencrypt-acme-challenge.conf
    content: ''
    force: false
    mode: 0644
    owner: root
    group: root

- name: Run acro-add-website - SSL registration can take up to a minute or more
  shell: >
     export TERM=xterm-256color {{ env_mysql_db_name }} {{ env_mysql_db_user }} {{ env_mysql_db_pass }}; /usr/bin/timeout 30s /bin/bash /usr/local/sbin/acro-add-website.sh --account {{ linux_owner }} --project {{ project }} --fqdn {{ nginx_primal_name }} --webroot {{ web_root_dir_name }} --php-version {{ php_version }} --responsible-person {{ responsible_person }} --mysql-allow-from {{ mysql_allow_from }} --mysql-host-address {{ mysql_host_address }} {{ skip_ssl_flag }} {{ rds_flag }} {{ service_account_flag }} {{ force_flag}} {{ skip_mysql_flag }}
  args:
    creates: /home/{{ linux_owner }}/.acro-add-website/{{ project }}

- name: Try and expand the primal name's Certificate to include nginx aliases and canonical name. If DNS is pointing at the machine for these names, the command will work.
  script:  scripts/certbot-wrapper
  args:
    executable: /bin/bash
  environment:
    INVENTORY_HOSTNAME: "{{ inventory_hostname }}"
    NGINX_PRIMAL_NAME: "{{ nginx_primal_name }}"
    NGINX_CANONICAL_NAME: "{{ nginx_canonical_name }}"
    NGINX_ALIASES: "{{ nginx_aliases |join(',') }}"
  when: deploy_env == 'production'
    and ssl == 'letsencrypt'
  register: letsencrypt_result
  ignore_errors: true

- name: Upload arbitrary customizations from the playbook through the role to the remote host
  template:
    src: "{{ nginx_include_custom }}"
    dest: "{{ nginx_include_custom_dest }}"
    owner: root
    group: root
    mode: 0644
    backup: true
  notify: arvh safe reload nginx
  when: nginx_include_custom != ''

- name: Configure nginx rate limit memory zone to protect PHP FPM on {{ linux_owner }}/{{ project }}
  template:
    src: "{{ role_path }}/templates/etc/nginx/conf.d/limit_req_zone.ACCOUNT-PROJECT.conf.j2"
    dest: "{{ nginx_limit_req_zone_file }}"
    backup: true
    owner: root
    group: root
    mode: 0644
  notify:
    - arvh safe reload nginx
  when: php_version != 'none'

- name: Update PHP FPM nginx include for {{ linux_owner }}/{{ project }}
  template:
    src: "{{ role_path }}/templates/etc/nginx/includes/ACCOUNT-PROJECT.php-fpm.conf.j2"
    dest: "{{ path_to_nginx_php_fpm_include }}"
    backup: true
  notify:
    - arvh safe reload nginx
  when: php_version != 'none'

- name: Update nginx core conf include for {{ linux_owner }}/{{ project }}
  template:
    src: "{{ role_path }}/templates/etc/nginx/includes/ACCOUNT-PROJECT.core.conf.j2"
    dest: "/etc/nginx/includes/{{ linux_owner }}-{{ project }}.core.conf"
    backup: true
  notify:
    - arvh safe reload nginx

- name: Update nginx virtual host configuration for {{ linux_owner }}/{{ project }}
  template:
    src: "{{ role_path }}/templates/etc/nginx/sites-available/{{ deploy_env }}.{{ ssl }}.conf.j2"
    dest: "{{ nginx_vhost_conf_dir }}/{{ linux_owner }}-{{ project }}.conf"
    backup: true
  notify:
    - arvh safe reload nginx

- name: Enable (symlink) nginx virtual host configuration for {{ linux_owner }}/{{ project }}
  file:
    src: "/etc/nginx/sites-available/{{ linux_owner }}-{{ project }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ linux_owner }}-{{ project }}.conf"
    state: link
  when: ansible_os_family == 'Debian'
    and not ansible_check_mode
  notify:
    - arvh safe reload nginx

- name: Remove vhost files that used the old naming convention
  file:
    state: absent
    path: "{{ item }}"
  loop:
    - /etc/nginx/sites-available/{{ nginx_primal_name }}
    - /etc/nginx/sites-enabled/{{ nginx_primal_name }}
  when: ansible_os_family == 'Debian'
  notify:
    - arvh safe reload nginx

- name: Remove old duplicate {{ php_fpm_pool_dir }}/{{ linux_owner }}-{{ project }}.conf
  file:
    path: "{{ php_fpm_pool_dir }}/{{ linux_owner }}-{{ project }}.conf"
    state: absent
  when: linux_owner == project
  notify:
    - restart {{ php_service_name }}

- name: Update PHP {{ php_version }} FPM pool for {{ linux_owner }}/{{ project }}
  template:
    src: "{{ role_path }}/templates/etc/php/VERSION/fpm/pool.d/ACCOUNT-PROJECT.conf.j2"
    dest: "{{ php_fpm_pool_dir }}/{{ x__fpm_pool_filename }}"
    backup: true
  notify:
    - restart {{ php_service_name }}
  when: php_version != 'none'

- name: Construct a list of notifies to use when changing a pool between PHP versions
  shell: >
    /usr/bin/dpkg --list|/bin/grep -woE '\bphp.*-fpm\b'|/bin/grep -v dbgsym|/usr/bin/awk '{print "restart " $1}'
  register: cmdresult_php_notify_list
  changed_when: false
  when: php_version != 'none'
    and ansible_os_family == 'Debian'

- name: Enumerate /etc/php/VERSION/fpm/pool.d directories that are not "{{ php_version }}", used by the 'remove' task below)
  shell: >
    /usr/bin/find /etc/php -maxdepth 3 -type d -path '/etc/php/*/fpm/pool.d' | /usr/bin/cut -d'/' -f 4 | (grep -v "{{ php_version }}" || true)
  register: cmdresult_enumerate_php_version_numbers
  changed_when: false
  when: php_version != 'none'
    and ansible_os_family == 'Debian'

- name: Remove all FPM pools that are not PHP {{ php_version }} for {{ linux_owner }}/{{ project }} - 1 of 2
  file:
    path: /etc/php/{{ item }}/fpm/pool.d/{{ linux_owner }}-{{ project }}.conf
    state: absent
  with_items:
    - "{{ cmdresult_enumerate_php_version_numbers.stdout_lines|default([]) }}"
  notify: "{{ cmdresult_php_notify_list.stdout_lines|default([]) }}"
  when: php_version != 'none'
    and ansible_os_family == 'Debian'

- name: Remove all FPM pools that are not PHP {{ php_version }} for {{ linux_owner }}/{{ project }} - 2 of 2
  file:
    path: /etc/php/{{ item }}/fpm/pool.d/{{ project }}.conf
    state: absent
  with_items:
    - "{{ cmdresult_enumerate_php_version_numbers.stdout_lines|default([]) }}"
  notify: "{{ cmdresult_php_notify_list.stdout_lines|default([]) }}"
  when: linux_owner == project
    and php_version != 'none'
    and ansible_os_family == 'Debian'

- name: Install dependency for htpasswd operations
  apt:
    name: python-passlib
    state: present
    update_cache: true
  when: require_http_auth == true
    and ansible_os_family == 'Debian'

- name: Create htpasswd file for {{ linux_owner }}-{{ project }}
  htpasswd:
    path: "{{ path_to_htpasswd_file }}"
    name: "{{ http_auth_username }}"
    password: "{{ http_auth_password }}"
    owner: root
    group: www-data
    mode: 0640
  when: require_http_auth == true
  notify:
    - arvh safe reload nginx
