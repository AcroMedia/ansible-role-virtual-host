# {{ ansible_managed }}
# See https://git.acromedia.com/acro/devops/ansible-role-virtual-host/tree/master/templates/etc/nginx/sites-available/staging.letsencrypt.j2

### STAGING ###
# For 'staging' sites, primal takes precedence over canonical, since DNS for canonical doesn't point to this machine.
# If primal and canonical are both the same, only primal will be used.

# Insecure primal: Redirect to secure primal.
server {
  listen {{ http_port }};
  server_name {{ nginx_primal_name }};
  access_log {{ nginx_access_log_conf }};
  error_log /var/log/vhosts/{{ linux_owner }}/{{ project }}/nginx-error.log;
  include /etc/nginx/includes/letsencrypt-acme-challenge.conf;
  location / {
    return {{ redirect_code }} https://{{ nginx_primal_name }}$request_uri;
  }
}

# Secure primal: Serve.
server {
  listen {{ https_port }} {{ 'ssl http2' if nginx_http2 else 'ssl' }};
  server_name {{ nginx_primal_name }};
  {% include 'ssl.letsencrypt.inc.j2' %}
  access_log {{ nginx_access_log_conf }};
  error_log /var/log/vhosts/{{ linux_owner }}/{{ project }}/nginx-error.log;
  include /etc/nginx/includes/letsencrypt-acme-challenge.conf;
  include /etc/nginx/includes/{{ linux_owner }}-{{ project }}.core.conf;
}

{% if nginx_aliases|length > 0 %}
# Insecure aliases: Redirect to insecure canoncial if canonical != primal, otherwise redirect to secure primal.
server {
  listen {{ http_port }};
  server_name {{ nginx_aliases|join(' ') }};
  access_log {{ nginx_access_log_conf }};
  error_log /var/log/vhosts/{{ linux_owner }}/{{ project }}/nginx-error.log;
  include /etc/nginx/includes/letsencrypt-acme-challenge.conf;
  location / {
    {% if (nginx_primal_name != nginx_canonical_name) %}
    return {{ redirect_code }} http://{{ nginx_canonical_name }}$request_uri;
    {% else %}
    return {{ redirect_code }} https://{{ nginx_primal_name }}$request_uri;
    {% endif %}
  }
}
{% endif %}

{% if (nginx_primal_name != nginx_canonical_name) %}
# Insecure canonical: Serve.
# The canonical name normally isn't used in staging mode (DNS doesn't point here),
# so serving instead of redirecting prevents "invalid SSL" errors during a launch transition.
server {
  listen {{ http_port }};
  server_name {{ nginx_canonical_name }};
  access_log {{ nginx_access_log_conf }};
  error_log /var/log/vhosts/{{ linux_owner }}/{{ project }}/nginx-error.log;
  include /etc/nginx/includes/letsencrypt-acme-challenge.conf;
  include /etc/nginx/includes/{{ linux_owner }}-{{ project }}.core.conf;
}
{% endif %}

{% if nginx_aliases|length > 0 %}
# Secure aliases: Serve. Expect SSL errors, since aliases are not yet included in the certificate.
server {
  listen {{ https_port }} {{ 'ssl http2' if nginx_http2 else 'ssl' }};
  server_name {{ nginx_aliases|join(' ') }};
  {% include 'ssl.letsencrypt.inc.j2' %}
  access_log {{ nginx_access_log_conf }};
  error_log /var/log/vhosts/{{ linux_owner }}/{{ project }}/nginx-error.log;
  include /etc/nginx/includes/letsencrypt-acme-challenge.conf;
  location / {
    return {{ redirect_code }} https://{{ nginx_canonical_name }}$request_uri;
  }
}
{% endif %}

{% if (nginx_primal_name != nginx_canonical_name) %}
# Secure canonical. Serve. Expect SSL errors, since the canonical name is not yet included in the certificate.
server {
  listen {{ https_port }} {{ 'ssl http2' if nginx_http2 else 'ssl' }};
  server_name {{ nginx_canonical_name }};
  {% include 'ssl.letsencrypt.inc.j2' %}
  access_log {{ nginx_access_log_conf }};
  error_log /var/log/vhosts/{{ linux_owner }}/{{ project }}/nginx-error.log;
  include /etc/nginx/includes/letsencrypt-acme-challenge.conf;
  include /etc/nginx/includes/{{ linux_owner }}-{{ project }}.core.conf;
}
{% endif %}
