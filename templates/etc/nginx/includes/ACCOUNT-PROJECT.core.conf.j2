# {{ ansible_managed }}
# See https://git.acromedia.com/acro/devops/ansible-role-virtual-host
# -> /templates/etc/nginx/includes/ACCOUNT-PROJECT.core.conf.j2

{% if disable_http_auth == true %}
  auth_basic off;

{% elif require_http_auth == true
    and http_auth_username != ''
    and http_auth_password != ''
%}
  auth_basic "{{ http_auth_message }}";
  auth_basic_user_file {{ path_to_htpasswd_file }};

{% endif %}

{% if disable_environment_indicator %}
  sub_filter "Disable_environment_indicator_for_{{ linux_owner }}_{{ project }}" "";

{% endif %}

  root /home/{{ linux_owner }}/www/{{ project }}/{{ web_root_dir_name }};
  index {{ default_document }};
  client_max_body_size {{ client_max_body_size }};

{% if web_application != 'proxy_pass' %}
  # Enable compression. This will help if you have, for instance, the advagg module
  # by serving Gzip versions of the files.
  gzip_static on;
{% endif %}

{% if nginx_include_custom != '' %}
  # nginx_include_custom
  # Uploaded by acromedia/ansible-role-virtual-host
  # See: {{ nginx_include_custom }}
  include "{{ nginx_include_custom_dest }}";
{% endif %}

{% if nginx_include_resident != '' %}
  # nginx_include_resident
  include "{{ nginx_include_resident }}";
{% endif %}

{% if nginx_inline_custom != '' %}
  # nginx_inline_custom BEGIN
{{ nginx_inline_custom }}
  # nginx_inline_custom END
{% endif %}

{% if web_application != 'proxy_pass' %}
{% if nginx_location_extras|length > 0  %}
{% for extra_location in nginx_location_extras %}
  # {{ extra_location.name|default('') }}
  location {{ extra_location.location }} {
    {{ extra_location.config }}
  }

{% endfor %}
{% endif %}{# /nginx_location_extras #}
{% endif %}{# /web_application #}

{% if web_application != 'proxy_pass' %}
  # Requests for this just clutters log files.
  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }
{% endif %}

{% if web_application != 'proxy_pass' %}
  # Handle requests for robots.txt.
  # This conf file is symlinked to an environment-specific file, so we can have different behaviour depending on whether this machine is production or staging / development.
  include /etc/nginx/includes/robots.conf;
{% endif %}

{% if web_application != 'proxy_pass' %}
  # Very rarely should these ever be accessed outside of your lan
  location ~* \.({{ nginx_protected_filename_extensions | join('|') }})$ {
{% for allowed_cidr in nginx_trusted_cidrs %}
    allow {{ allowed_cidr }};
{% endfor %}
    deny all;
  }
{% endif %}

{% if 'drupal' in web_application  %}
  # Drupal (all versions):
  # Deny access to install/update scripts except from "nginx_trusted_cidrs"
  # - install.php is not needed since we don't allow PHP to modify settings.php.
  # - update.php is not needed, since we update with drush.
  # If something ever goes wrong with settings.php, this keeps the install script from being exposed to anonymous users, regardless of whether it can be used or not.
  location ~ ^(/core)?/(install|update)\.php {
{% for allowed_cidr in nginx_trusted_cidrs %}
    allow {{ allowed_cidr }};
{% endfor %}
    deny all;
{% if php_version != 'none' %}
    include {{ path_to_nginx_php_fpm_include }};
{% endif %}
  }

  # Other Drupal files that contain PHP, but shouldn't be served or processed directly
  location ~* \.({{ drupal_blocked_filename_extensions | join('|') }})$ {
    return 403;
  }

  # Dont allow requests for PHP files in parent directories
  location ~ \..*/.*\.php$ {
    return 403;
  }

  # Dont serve any filename ending with a tilde ... these are almost always backup files
  location ~* /*~$ {
    return 403;
  }

  # Don't allow php to run from inside upload dirs. PHP Execution + Anonymous write = Hacked website.
  location ~ {{ nginx_drupal_uploads_dir_pattern }}/.*\.php$ {
    return 403;
  }

  # Don't serve anything from private diretories. BTW these should really be outside of your web root anyway.
  location ~ ^/sites/.*/private/ {
    return 403;
  }

  # Deny access to drupal tmp dir ... Won't normally be here anyway, except on a multi-node system.
  location ~ ^/sites/.*/tmp/ {
    return 403;
  }

  # Block access to "hidden" files and directories whose names begin with a
  # period. This includes directories used by version control systems such
  # as Subversion or Git to store control files.
  location ~ (^|/)\. {
    return 403;
  }
{% endif %}

{% if web_application != 'proxy_pass' %}
{% if nginx_ip_restricted_locations|length > 0  %}
{% for restricted_location in nginx_ip_restricted_locations %}
      location {{ restricted_location }} {
{% for allowed_ip in nginx_allowed_ips %}
          allow {{ allowed_ip }};
{% endfor %}
        deny all;
{% if restricted_location.endswith('.php')  %}
{% if php_version != 'none' %}
            include {{ path_to_nginx_php_fpm_include }};
{% endif %}
{% else %}
          try_files $uri $uri/ @rewrite;
{% endif %}
      }
{% endfor %}{# /nginx_ip_restricted_locations|length > 0 #}
{% endif %}{# /restricted_location in nginx_ip_restricted_locations #}
{% endif %}{# /web_application != 'proxy_pass' #}


{% if web_application == 'redirect' and redirect_to != '' %}
  location / {
    return {{ redirect_code }} {{ redirect_to }};
  }


{% elif (web_application == 'drupal6'
    or web_application == 'drupal5'
    or web_application == 'drupal4')    %}

  # Serve static content before involving PHP
  location / {
    try_files $uri $uri/ @rewrite;
  }

  # Drupal 6
  location @rewrite {
    if (!-e $request_filename) {
      rewrite ^/(.*)$ {{ rewrite_target }}?q=$1;
    }
  }
  # Image cache doesn't work without this.
  location ~ {{ image_cache_location }} {
    try_files $uri @rewrite;
  }

{% elif web_application == 'wordpress' %}

  # Serve static content before involving PHP
  location / {
    try_files $uri $uri/ @rewrite;
  }

  # Wordpress:
  # Deny access to any files with a .php extension in the uploads directory
  # Works in sub-directory installs and also in multisite network
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~* /(?:uploads|files)/.*\.php$ {
    return 403;
  }

  # Wordpress:
  # Deny all access to specific locations
  location = /wp-config.php {
    return 403;
  }
  location = /xmlrpc.php {
{% if nginx_allow_wp_xmlrpc and php_version != 'none' %}
      include {{ path_to_nginx_php_fpm_include }};
{% else %}
      return 403;
{% endif %}
  }
{% if not nginx_allow_wp_json %}
  location /wp-json {
    return 403;
  }
{% endif %}

  # Wordpress:
  # Include the "?$args" part so non-default permalinks doesn't break when using query string
  location @rewrite {
    rewrite ^ {{ rewrite_target }}?$args;
  }

{% elif web_application == 'drupal7' %}

  # Drupal 7: Serve static content before involving PHP
  location / {
    try_files $uri $uri/ @rewrite;
  }

  # Drupal 7: Clean URLs are handled in drupal_environment_initialize().
  location @rewrite {
    rewrite ^ {{ rewrite_target }};
  }

  # Drupal 7: Image cache doesn't work without this.
  location ~ {{ image_cache_location }} {
    try_files $uri @rewrite;
  }

  # Drupal 7: Allow drupal to act as a broker for files served from the private dir
  location ~* /system/files/ {
    try_files $uri @rewrite;
  }

{% elif web_application == 'drupal8' %}

  # Drupal 8: Serve static content before involving PHP
  location / {
    try_files $uri $uri/ @rewrite;
  }

  # Drupal 8: Clean URLs are handled in drupal_environment_initialize().
  location @rewrite {
    rewrite ^ {{ rewrite_target }};
  }

  # Drupal 8: Image cache doesn't work without this.
  location ~ {{ image_cache_location }} {
    try_files $uri @rewrite;
  }

  # Drupal 8: Allow drupal to act as a broker for files served from the private dir
  location ~* /system/files/ {
    try_files $uri @rewrite;
  }

{% elif web_application == 'mediawiki' %}

  # Don't let PHP run where it has write permission. Write + Execute == Hijacked.
  location ~ /images/.*\.php$ {
    return 403;
  }

  location / {
    try_files $uri $uri/ @rewrite;
  }

  location @rewrite {
    rewrite ^/wiki/(.*)$ /index.php?title=$1&$args;
  }

  location ^~ /maintenance/ {
    return 403;
  }

  location ~* \.({{ nginx_static_resource_filename_extensions | join('|') }})$ {
    try_files $uri /index.php;
    expires max;
    log_not_found off;
  }

  location = /_.gif {
    expires max;
    empty_gif;
  }

  location ^~ /cache/ {
    deny all;
  }

{% elif web_application == 'moodle' %}
  # PHP FPM on a socket
  location ~ [^/]\.php(/|$) {
    fastcgi_split_path_info  ^(.+\.php)(/.+)$;
    fastcgi_index            index.php;
    fastcgi_pass unix:/var/run/php{{ php_version }}-fpm-{{ linux_owner }}-{{ project }}.sock;
    include                  fastcgi_params;
    fastcgi_param   PATH_INFO       $fastcgi_path_info;
    fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
  }

{% elif web_application == 'proxy_pass' %}

  # Proxy pass
  location / {
    {{ nginx_proxy_pass_blob }}
  }

{% elif web_application == 'php' %}

  # Generic PHP website
  location / {
    try_files $uri $uri/ =404;
  }

{% else %}{# implied: web_application == 'static' #}

  # Static website
  location / {
    try_files $uri $uri/ =404;
  }

{% endif %}

{% if web_application != 'proxy_pass' %}
  # Dont spam log files, and cache static content forever.
  location ~* \.({{ nginx_static_resource_filename_extensions | join('|') }})$ {
    expires max;
    log_not_found off;
{% if nginx_rewrite_static_content %}
    try_files $uri @rewrite;
{% endif %}
  }
{% endif %}

{% if web_application != 'static' and web_application != 'proxy_pass' and web_application != 'moodle' and php_version != 'none' %}

  # PHP FPM on a socket
  location ~ \.php$ {
    include {{ path_to_nginx_php_fpm_include }};
  }

{% endif %}
